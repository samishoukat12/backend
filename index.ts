import { AuthResolver } from './src/graphQl/resolver/Resolvers';
import { getData } from './src/getsORSets/getData';
import { setData } from './src/getsORSets/setData';

import { Resolver } from 'type-graphql';
import { Container } from 'typedi';
import { autogeneratedResolver } from './src/graphQl/autoGeneratedResolvers/autogeneratedResolver';
import { PrismaClient } from '@prisma/client';
import { ApolloServer, ExpressContext } from 'apollo-server-express';
import express from 'express';
// import {setData} from './src/getsORSets/setData'
import { UserContext } from './src/graphQl/types/user-context';
import { buildSchema, NonEmptyArray } from 'type-graphql';
const app = express();
const PORT = process.env.PORT || 3000;
const prisma = new PrismaClient();
async function main() {
  try {
    // Connect the client
    await prisma.$connect();

    //graphql schema

    const schema = await buildSchema({
      resolvers: [
        ...autogeneratedResolver(),
        AuthResolver
      ]
      ,
    });
    // setData()
    getData()

    //apollo server

    const apolloServer = new ApolloServer({
      schema,
      context: ({ req, res }: ExpressContext): UserContext => {
        return { prisma, req, res };
      },
    });
    await apolloServer.start();
    apolloServer.applyMiddleware({ app });
  } catch (error) {
    console.log(error);
  } finally {
    await prisma.$disconnect();
  }
}

main();

app.listen(PORT, () => {
  console.log(
    `server is running at ${PORT} port/graphql+apolloServer.graphqlPath`
  );
});
